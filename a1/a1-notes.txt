Output after cracking easy_dump:
easyuser1:jesse:1011:1011::/home/easyuser1:/bin/sh
easyuser2:daedalus:1012:1012::/home/easyuser2:/bin/sh
easyuser3:omega:1013:1013::/home/easyuser3:/bin/sh
easyuser4:allstate:1014:1014::/home/easyuser4:/bin/sh
easyuser5:joyce:1015:1015::/home/easyuser5:/bin/sh

Output so far for medium_dump:
mediumuser1:american12
mediumuser2:juliejulie:1012:1012::/home/mediumuser2:/bin/sh
mediumuser3:simamora
mediumuser4:jadey1:1014:1014::/home/mediumuser4:/bin/sh
mediumuser5:jai123:1015:1015::/home/mediumuser5:/bin/sh

Output so for for hard_dump:
harduser1:triggers:1011:1011::/home/harduser1:/bin/sh
harduser2
harduser3:5300block
harduser4
harduser5:nabisco0:1015:1015::/home/harduser5:/bin/sh

I got 3/5 users when I used the following command:
~/JohnTheRipper-unstable-jumbo/run/john --wordlist=../top-10000-passwords.txt --rules medium_dump

From the doc/OPTIONS file for john:
--stdout[=LENGTH]         just output candidate passwords

When used with a cracking mode, except for "single crack", makes John
output the candidate passwords it generates to stdout instead of
actually trying them against password hashes; no password files may be
specified when this option is used.  If a LENGTH is given, John
assumes that to be the significant password length and only produces
passwords up to that length.

Note that with this option, no password files can be specified. However,
password mangling and wordlist options should still work.
This option must be used with a cracking mode.

This works for sending passwords to stdout:
john --wordlist=password.lst --rules --stdout

This command works for the practice nohash file:
cat /A1/practice_file.aes256.nohash.txt | base64 --decode | openssl enc -aes256 -md md5 -d -k lolsecret

This command works for practice MD5 file:
cat /A1/practice_file.aes256.MD5.txt | base64 --decode | openssl enc -aes256 -md md5 -d -k "$(echo -n lolsecret | md5sum | awk '{print $1}')"

Now trying to crack medium dump with this command:
~/JohnTheRipper-unstable-jumbo/run/john --wordlist=over-million.lst --rules part_a/medium_dump &> part_a/medium_dump_john_out.out
~/JohnTheRipper-unstable-jumbo/run/john --wordlist=over-million.lst --rules part_a/hard_dump &> part_a/medium_dump_john_out.out

ssh command for port forwarding that works (run in git-bash):
ssh -L 5000:127.0.0.1:5000 student@134.117.131.136

I should augment my million common passwords with a dictionary

To try to find a username, I can use python webcrawling
I can go through the first 100k usernames until the html is not
the "username does not exist" one
I don't even need to enter a password to check the username

Take the src\comp4108\a1\find_active_username.py file and put it on
a Linux OS, and install chromedriver to the PATH so I can run
against the stuff
I will also want to transfer this file as well
To do this, just put everything in one git repo

Part B cracked output:
Modi porro non magnam neque quiquia.
The password that cracked part B: jeep95
I can prove this with the following command:
cat ~/part_b/secret_file.aes256.txt | base64 --decode | openssl enc -aes256 -md md5 -d -k "$(echo -n jeep95 | md5sum | awk '{print $1}')" && echo

Next grab full 10 million passwords and a bigger English dictionary
and point it at hard passwords again
Also read rest of chapter 3 to see if I can come up with a better approach
to cracking the hard and medium passwords

The following username works:
michael
adam
ian
jacqui
jhon
majid
smith
ashlie
ilya
leland
gaz
gogo
mariann
linzi
ambika
fer
astha
myo
jaymar
bharathi
sadhana
pansy
vidal
jolina
bich
akinyemi
kenichi
ramakant
carnell
tamira
ylva
sanjukta
sidhu
janah
gwynn
cortnie
suhan
mylinh
noureddine
tamila
lilianne
turgut
res
sawitree
izy
sabeer
brae
emam
fairoz
joshlyn
log
pyan
noby
irani
struan
lalani
osos
wyne
wed
fiki
eisen
grigori
chawki
parama
jesselle
kelie
jalyssa
rosabella
shabazz
satti
airyn
iyesha
altina
visu
ashitha
basi
lashara
jimel
sandon
kittichai
coro
grazel
jericson
iuli
zare
bff
rexter
wiyada
newaz
samuelle
nieke
mylon
widdy
err
phelim
aham
lotan
jaso
nurfarahin
steliana

michael is confirmed to be a registered user
The message for an invalid user is "Invalid password."

michael has the password: 123456789
Command I ran to find this:
/home/student/JohnTheRipper-unstable-jumbo/run/john --wordlist=/home/student/over-million.lst --rules --stdout | python find_password.py

Currently 24/28 points for A1

/home/student/JohnTheRipper-unstable-jumbo/run/john --config=/home/student/JohnTheRipper-unstable-jumbo/run/john.conf --incremental=Alpha --max-length=6 --progress-every=60 hard_dump

On Azure VM:
/home/shane/john/run/john --config=/home/shane/john/run/john.conf --incremental=Alpha --progress-every=60 hard_dump &> hard_dump.log
After this alpha one with 8 chars, then do alphanum with 7 (or 8)

Maybe try to brute force everything up to 8 characters of only alphanumeric on medium

I have something running on the Azure VM that is scheduled to be done sometime on 15th
The run on the openstack is supposed to be done 13th
So check them later

Another thing I should try is the rockyou password dictionary, and add it to my over million file

hashcat takes the hash mode as argument to -m
-m 0 is MD5
From https://github.com/frizb/Hashcat-Cheatsheet, I want -m 500 since it uses $1$ in the hashes

sudo hashcat --force --status -O -m 500 -a 0 -o /home/shane/a1/hard_cracked.txt hard_dump_just_hashes.txt /home/shane/dicts/rockyou.txt

No running with hob064 rules (https://raw.githubusercontent.com/praetorian-inc/Hob0Rules/master/hob064.rule):
sudo hashcat --force --status-timer=600 -O -m 500 -a 0 -o /home/shane/a1/hard_cracked.txt -r hob064.rule hard_dump_just_hashes.txt /home/shane/dicts/rockyou.txt

tail a1/hard_dump.log for john progress
tail a1/hashcat.log for hashcat progress